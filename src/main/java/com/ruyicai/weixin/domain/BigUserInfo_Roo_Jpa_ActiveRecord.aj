// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.ruyicai.weixin.domain;

import com.ruyicai.weixin.domain.BigUserInfo;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;

privileged aspect BigUserInfo_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager BigUserInfo.entityManager;
    
    public static final EntityManager BigUserInfo.entityManager() {
        EntityManager em = new BigUserInfo().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long BigUserInfo.countBigUserInfoes() {
        return entityManager().createQuery("SELECT COUNT(o) FROM BigUserInfo o", Long.class).getSingleResult();
    }
    
    public static List<BigUserInfo> BigUserInfo.findAllBigUserInfoes() {
        return entityManager().createQuery("SELECT o FROM BigUserInfo o", BigUserInfo.class).getResultList();
    }
    
    public static BigUserInfo BigUserInfo.findBigUserInfo(String openid) {
        if (openid == null || openid.length() == 0) return null;
        return entityManager().find(BigUserInfo.class, openid);
    }
    
    public static List<BigUserInfo> BigUserInfo.findBigUserInfoEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM BigUserInfo o", BigUserInfo.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void BigUserInfo.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void BigUserInfo.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            BigUserInfo attached = BigUserInfo.findBigUserInfo(this.openid);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void BigUserInfo.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void BigUserInfo.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public BigUserInfo BigUserInfo.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        BigUserInfo merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
